1. Model (models/userModel.js)
The Model manages the users array and provides methods to interact with it.
  // In-memory data store
const users = [
    { id: 1, firstName: 'Chitta', lastName: 'Mohapatra', email: 'chitta@example.com', mobile: '1234567890' },
    { id: 2, firstName: 'John', lastName: 'Doe', email: 'john@example.com', mobile: '0987654321' }
];

// Functional Model object
const userModel = {
    getAllUsers: () => users,

    findUser: (firstName, lastName, email) => {
        return users.find(u => u.firstName === firstName && u.lastName === lastName && u.email === email);
    },

    addUser: (firstName, lastName, email, mobile) => {
        const newUser = { id: users.length + 1, firstName, lastName, email, mobile };
        users.push(newUser);
        return newUser;
    },

    updateUser: (id, email, mobile) => {
        const userIndex = users.findIndex(u => u.id === parseInt(id));
        if (userIndex !== -1) {
            users[userIndex] = {
                ...users[userIndex],
                email: email || users[userIndex].email,
                mobile: mobile || users[userIndex].mobile
            };
            return users[userIndex];
        }
        return null;
    },

    deleteUser: (id) => {
        const userIndex = users.findIndex(u => u.id === parseInt(id));
        if (userIndex !== -1) {
            return users.splice(userIndex, 1)[0];
        }
        return null;
    },
searchUser: (query) => {
        return users.filter(u => u.email === query || u.mobile === query);
    }

};

module.exports = userModel;

2. Controller (controllers/userController.js)
The Controller handles HTTP requests, interacts with the Model, and sends responses (the "View").
 const userModel = require('../models/userModel');

// Functional Controller object
const userController = {
    login: async (req, res) => {
        const { firstName, lastName, email } = req.body;
        const nameRegex = /^[a-zA-Z]{3,}$/;
        if (!firstName || !lastName || !nameRegex.test(firstName) || !nameRegex.test(lastName)) {
            return res.status(400).json({ success: false, message: 'First name and last name must be at least 3 characters and alphabets only' });
        }
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!email || !emailRegex.test(email)) {
            return res.status(400).json({ success: false, message: 'Invalid email format' });
        }
        const user = userModel.findUser(firstName, lastName, email);
        if (user) {
            res.status(200).json({ success: true, message: 'Login successful' });
        } else {
            res.status(401).json({ success: false, message: 'Invalid credentials' });
        }
    },

    addUser: async (req, res) => {
        const { firstName, lastName, email, mobile } = req.body;
        const newUser = userModel.addUser(firstName, lastName, email, mobile);
        res.status(201).json({ message: 'User added', user: newUser });
    },

    getAllUsers: async (req, res) => {
        const users = userModel.getAllUsers();
        res.status(200).json(users);
    },

    updateUser: async (req, res) => {
        const { id } = req.params;
        const { email, mobile } = req.body;
        const updatedUser = userModel.updateUser(id, email, mobile);
        if (updatedUser) {
            res.status(200).json({ message: 'User updated', user: updatedUser });
        } else {
            res.status(404).json({ message: 'User not found' });
        }
    },

    deleteUser: async (req, res) => {
        const { id } = req.params;
        const deletedUser = userModel.deleteUser(id);
        if (deletedUser) {
            res.status(200).json({ message: 'User deleted' });
        } else {
            res.status(404).json({ message: 'User not found' });
        }
    },
    searchUser: async (req, res) => {
        const { query } = req.query;
        const results = userModel.searchUser(query);
        res.status(200).json(results);
    }

};

module.exports = userController;

3. Main Server (server.js) - Routes as "View" Setup
The server sets up routes and connects them to the Controller.
 const express = require('express');
const cors = require('cors');
const UserController = require('./controllers/userController');

const app = express();
const port = 3000;

app.use(cors());
app.use(express.json());

// Routes
app.post('/api/login', UserController.login);
app.post('/api/users', UserController.addUser);
app.get('/api/users', UserController.getAllUsers);
app.put('/api/users/:id', UserController.updateUser);
app.delete('/api/users/:id', UserController.deleteUser);

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});


FrontEnd
src/App.js

import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Login from './components/Login';
import HomePage from './components/HomePage';

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Login />} />
        <Route path="/homepage" element={<HomePage />} />
      </Routes>
    </Router>
  );
}

export default App;
src/components/Login.js

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

function Login() {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    const response = await fetch('http://localhost:3000/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ firstName, lastName, email }),
    });
    const data = await response.json();

    if (data.success) {
      navigate('/homepage');
    } else {
      setMessage(data.message);
    }
  };

  return (
    <div style={{ padding: '20px' }}>
      <h2>Login</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label>First Name: </label>
          <input value={firstName} onChange={(e) => setFirstName(e.target.value)} required />
        </div>
        <div>
          <label>Last Name: </label>
          <input value={lastName} onChange={(e) => setLastName(e.target.value)} required />
        </div>
        <div>
          <label>Email: </label>
          <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} required />
        </div>
        <button type="submit">Login</button>
      </form>
      {message && <p style={{ color: 'red' }}>{message}</p>}
    </div>
  );
}

export default Login;

src/components/HomePage.js

import React, { useState } from 'react';
import AddUser from './AddUser';
import DisplayAll from './DisplayAll';
import Search from './Search';

function HomePage() {
  const [view, setView] = useState('');

  return (
    <div style={{ padding: '20px' }}>
      <h2>Home Page</h2>
      <button onClick={() => setView('add')}>Add</button>
      <button onClick={() => setView('display')}>Display All</button>
      <button onClick={() => setView('search')}>Search</button>

      {view === 'add' && <AddUser />}
      {view === 'display' && <DisplayAll />}
      {view === 'search' && <Search />}
    </div>
  );
}

export default HomePage;

src/components/AddUser.js

import React, { useState } from 'react';

function AddUser() {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [mobile, setMobile] = useState('');
  const [message, setMessage] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    const response = await fetch('http://localhost:3000/api/users', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ firstName, lastName, email, mobile }),
    });
    const data = await response.json();
    setMessage(data.message);
  };

  return (
    <div>
      <h3>Add User</h3>
      <form onSubmit={handleSubmit}>
        <input value={firstName} onChange={(e) => setFirstName(e.target.value)} placeholder="First Name" required />
        <input value={lastName} onChange={(e) => setLastName(e.target.value)} placeholder="Last Name" required />
        <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="Email" required />
        <input value={mobile} onChange={(e) => setMobile(e.target.value)} placeholder="Mobile" required />
        <button type="submit">Add</button>
      </form>
      {message && <p>{message}</p>}
    </div>
  );
}

export default AddUser;

src/components/DisplayAll.js
import React, { useState, useEffect } from 'react';
import UpdateUser from './UpdateUser';

function DisplayAll() {
  const [users, setUsers] = useState([]);
  const [updateId, setUpdateId] = useState(null);

  useEffect(() => {
    fetch('http://localhost:3000/api/users')
      .then(res => res.json())
      .then(data => setUsers(data));
  }, []);

  const handleDelete = async (id) => {
    await fetch(`http://localhost:3000/api/users/${id}`, { method: 'DELETE' });
    setUsers(users.filter(u => u.id !== id));
  };

  return (
    <div>
      <h3>All Users</h3>
      <table border="1">
        <thead>
          <tr>
            <th>ID</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Mobile</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {users.map(user => (
            <tr key={user.id}>
              <td>{user.id}</td>
              <td>{user.firstName}</td>
              <td>{user.lastName}</td>
              <td>{user.email}</td>
              <td>{user.mobile}</td>
              <td>
                <button onClick={() => setUpdateId(user.id)}>Update</button>
                <button onClick={() => handleDelete(user.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      {updateId && <UpdateUser id={updateId} setUpdateId={setUpdateId} setUsers={setUsers} />}
    </div>
  );
}

export default DisplayAll;
import React, { useState, useEffect } from 'react';
import UpdateUser from './UpdateUser';

function DisplayAll() {
  const [users, setUsers] = useState([]);
  const [updateId, setUpdateId] = useState(null);

  useEffect(() => {
    fetch('http://localhost:3000/api/users')
      .then(res => res.json())
      .then(data => setUsers(data));
  }, []);

  const handleDelete = async (id) => {
    await fetch(`http://localhost:3000/api/users/${id}`, { method: 'DELETE' });
    setUsers(users.filter(u => u.id !== id));
  };

  return (
    <div>
      <h3>All Users</h3>
      <table border="1">
        <thead>
          <tr>
            <th>ID</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Mobile</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {users.map(user => (
            <tr key={user.id}>
              <td>{user.id}</td>
              <td>{user.firstName}</td>
              <td>{user.lastName}</td>
              <td>{user.email}</td>
              <td>{user.mobile}</td>
              <td>
                <button onClick={() => setUpdateId(user.id)}>Update</button>
                <button onClick={() => handleDelete(user.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      {updateId && <UpdateUser id={updateId} setUpdateId={setUpdateId} setUsers={setUsers} />}
    </div>
  );
}

export default DisplayAll;

src/components/UpdateUser.js

import React, { useState } from 'react';

function UpdateUser({ id, setUpdateId, setUsers }) {
  const [email, setEmail] = useState('');
  const [mobile, setMobile] = useState('');

  const handleUpdate = async (e) => {
    e.preventDefault();
    const response = await fetch(`http://localhost:3000/api/users/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, mobile }),
    });
    const data = await response.json();
    setUsers(prev => prev.map(u => (u.id === id ? data.user : u)));
    setUpdateId(null);
  };

  return (
    <div>
      <h3>Update User</h3>
      <form onSubmit={handleUpdate}>
        <input value={email} onChange={(e) => setEmail(e.target.value)} placeholder="New Email" />
        <input value={mobile} onChange={(e) => setMobile(e.target.value)} placeholder="New Mobile" />
        <button type="submit">Update</button>
        <button onClick={() => setUpdateId(null)}>Cancel</button>
      </form>
    </div>
  );
}

export default UpdateUser;

src/components/Search.js

import React, { useState } from 'react';

function Search() {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);

  const handleSearch = async (e) => {
    e.preventDefault();
    const response = await fetch(`http://localhost:3000/api/users/search?query=${query}`);
    const data = await response.json();
    setResults(data);
  };

  return (
    <div>
      <h3>Search User</h3>
      <form onSubmit={handleSearch}>
        <input value={query} onChange={(e) => setQuery(e.target.value)} placeholder="Email or Mobile" required />
        <button type="submit">Search</button>
      </form>
      {results.length > 0 && (
        <table border="1">
          <thead>
            <tr>
              <th>ID</th>
              <th>First Name</th>
              <th>Last Name</th>
              <th>Email</th>
              <th>Mobile</th>
            </tr>
          </thead>
          <tbody>
            {results.map(user => (
              <tr key={user.id}>
                <td>{user.id}</td>
                <td>{user.firstName}</td>
                <td>{user.lastName}</td>
                <td>{user.email}</td>
                <td>{user.mobile}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}

export default Search;


